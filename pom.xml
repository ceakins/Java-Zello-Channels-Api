<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.eakins.zello</groupId>
    <artifactId>zello-java-api</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>Zello Java API</name>
    <description>A Java API for interacting with Zello Channels using a builder methodology.</description>
    <!-- <url>http://www.example.com/zello-java-api</url> -->

    <properties>
        <maven.compiler.release>24</maven.compiler.release>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <slf4j.version>2.0.13</slf4j.version>
        <logback.version>1.5.6</logback.version>
    </properties>

    <dependencies>
        <!--
        Current API implementation uses placeholders for WebSocket, Opus, and VAD.
        For a real-world application, you would uncomment and add the actual
        dependencies for these functionalities. Below are common choices.
        -->

        <!-- WebSocket Client Library -->
        <dependency>
            <groupId>com.neovisionaries</groupId>
            <artifactId>nv-websocket-client</artifactId>
            <version>2.14</version>
        </dependency>
        <!-- JSON Processing Library (for Zello protocol messages) -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.19.1</version>
        </dependency>

        <!-- Opus Codec Library (JNI-based for performance) -->
        <!--
        <dependency>
            <groupId>org.concentus</groupId>
            <artifactId>opus-jni</artifactId>
            <version>1.3.1</version>
        </dependency>
        -->
        <!-- Or if you prefer a pure Java Opus implementation (may have performance implications) -->
        <dependency>
            <groupId>io.github.jaredmdobson</groupId>
            <artifactId>concentus</artifactId>
            <version>1.0.2</version>
        </dependency>

        <!-- Voice Activity Detection (VAD) Library -->
        <!-- Note: Jitsi-WebRTC-VAD-Wrapper also requires native libraries. -->
        <!--
        <dependency>
            <groupId>org.jitsi</groupId>
            <artifactId>webrtc-vad-java</artifactId>
            <version>1.2.0</version>
        </dependency>
        -->

        <!-- SLF4J API -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <!-- Logback Classic (SLF4J implementation) -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>
        <!-- Logback Core (dependency for logback-classic) -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <version>${logback.version}</version>
        </dependency>

        <!-- JUnit for testing (Recommended) -->
        <!--
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.10.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.10.0</version>
            <scope>test</scope>
        </dependency>
        -->
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <release>${maven.compiler.release}</release>
                </configuration>
            </plugin>
            <!-- You might add plugins for packaging, native library handling, etc. -->
        </plugins>
    </build>

</project>
